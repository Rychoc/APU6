ahpFile <- system.file("extdata", "makbooki.ahp", package="ahp")
macAhp <- Load(ahpFile)
install.packages("DiagrammeR")
install.packages("formattable")
install.packages("data.tree")
library(ahp)
library(data.tree)
library(formattable)
library(DiagrammeR)
macAhp <- Load(ahpFile)
print(macAhp, filterFun = isNotLeaf)
Calculate(macAhp)
print(macAhp, "weight")
print(macAhp, "ram", "dysk")
save.image("X:\\AdamJuraszek\\APU\\APU2\\.RData")
q()
install_tensorflow()/install_keras()
install_tensorflow()
setwd("X:/AdamJuraszek/APU/APU6")
library("tensorflow")
install_tensorflow()
library("keras")
cifar <- dataset_cifar100()
x_train <- cifar$train$x
x_test <- cifar$test$x
y_train <- cifar$train$y
y_test <- cifar$test$y
x_train <- array_reshape(x_train, c(nrow(x_train), 3072))
# wersja liniowa
x_train <- array_reshape(x_train, c(nrow(x_train), 3072))
x_train <- x_train / 255
x_test <- array_reshape(x_test, c(nrow(x_test), 3072))
x_test <- x_test / 255
y_train <- to_categorical(y_train, num_classes = 10)
y_train <- to_categorical(y_train, num_classes = 100)
y_test <- to_categorical(y_test, num_classes = 100)
model <- keras_model_sequential() %>%
  layer_dense(units = 256, activation = "relu", input_shape = c(3072)) %>%   
  layer_dropout(rate = 0.25) %>%                                            
  layer_dense(units = 128, activation = "relu") %>%
  layer_dropout(rate = 0.25) %>%
  layer_dense(units = 64, activation = "relu") %>%
  layer_dropout(rate = 0.25) %>%
  layer_dense(units = 10, activation = "relu")
summary(model)
model %>% compile(
  loss = "categorical_crossentropy",     #calculate loss
  optimizer = optimizer_adam(),          #optimization
  metrics = c("accuracy")                #accuracy
)
history <- model %>%
  fit(
    x_train, y_train,          #input
    epochs = 50,               
    batch_size = 128,          #128 pictures
    validation_split = 0.15
  )
model <- keras_model_sequential() %>%
  layer_dense(units = 256, activation = "relu", input_shape = c(3072)) %>%   
  layer_dropout(rate = 0.25) %>%                                            
  layer_dense(units = 128, activation = "relu") %>%
  layer_dropout(rate = 0.25) %>%
  layer_dense(units = 64, activation = "relu") %>%
  layer_dropout(rate = 0.25) %>%
  layer_dense(units = 100, activation = "relu")
model %>% compile(
  loss = "categorical_crossentropy",     #calculate loss
  optimizer = optimizer_adam(),          #optimization
  metrics = c("accuracy")                #accuracy
)
history <- model %>%
  fit(
    x_train, y_train,          #input
    epochs = 50,               
    batch_size = 128,          #128 pictures
    validation_split = 0.15
  )
model %>% evaluate(x_test, y_test)
model %>% evaluate(x_test, y_test)
model %>% predict(x_test) %>% k_argmin()
tf.Tensor([9 6 6 ... 1 8 6], shape=(10000,), dtype=int64)
plot(history)
summary(model)
cifar <- dataset_cifar100()
x_train <- cifar$train$x
x_test <- cifar$test$x
y_train <- cifar$train$y
y_test <- cifar$test$y
x_train <- x_train / 255 
x_test <- x_test / 255
y_train <- to_categorical(y_train, num_classes = 100)
y_test <- to_categorical(y_test, num_classes = 100)
model <- keras_model_sequential() %>%
  layer_flatten(input_shape = c(32, 32, 3)) %>%
  layer_dense(units = 128, activation = "relu") %>%
  layer_dense(units = 100, activation = "softmax")
summary(model)
model %>% compile(
  loss = "categorical_crossentropy",      #calculate loss
  optimizer = optimizer_adam(),           #optimization
  metrics = c("accuracy")                 #accuracy
)
history <- model %>%
  fit(
    x_train, y_train,
    epochs = 50,
    batch_size = 128,
    validation_split = 0.15
  )
model %>% evaluate(x_test, y_test)
model %>% predict(x_test) %>% k_argmin()
plot(history)
